class node:
    def __init__(self,data):
        self.val=data
        self.left=None
        self.right=None
        self.height=1
def inoder(root): 
    if not root:
        return 
    inoder(root.left)
    print(root.val)
    inoder(root.right)
def insert(Super,root):
    if not root:
        return node(Super)
    if Super<root.val:
        root.left=insert(Super,root.left)
    else:
        root.right=insert(Super,root.right)
    root.height=1+max(ght(root.left),ght(root.right))
    BF=getBF(root)
    #RR
    if BF>1 and Super<root.left.val:
        return rightrotate(root)
    if BF>1 and Super>root.left.val:#RL
        root.left=leftrotate(root.left)
        return rightrotate(root)
    if BF<-1 and Super>root.right.val:#LL
        return leftrotate(root)
    if BF<-1 and Super<root.right.val:#LR
        root.right=rightrotate(root.right)
        return leftrotate(root)
    return root
def ght(root):
    if not root:
        return 0
    else:
        return root.height
def getBF(root):
    if not root:
        return 0
    else:
        return ght(root.left)-ght(root.right)
    
def leftrotate(A):
    B=A.right
    temp=B.left
    B.left=A
    A.right=temp
    A.height=1+max(ght(A.left),ght(A.right))
    B.height=1+max(ght(B.left),ght(B.right))
    return B
def rightrotate(A):
    B=A.left
    temp=B.right
    B.right=A
    A.left=temp
    A.height=1+max(ght(A.left),ght(A.right))
    B.height=1+max(ght(B.left),ght(B.right))
    return B
    
    
if __name__=="__main__":
    root=None
    vl=[20,30,349,294,2031,2492,9049,948,3903,24230]
    for i in vl:
        root=insert(i,root)
inoder(root)
        
    
